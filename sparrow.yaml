tasks:
  -
    name: zef-build
    language: Bash
    default: true
    code: |
      set -e
      cd source/
      zef install . --force-install
      zef install App::Prove6 --force-install
      prove6 -I. t/ it/
    followup:
      -
        name: intergration_tests
  -
    name: intergration_tests
    language: Raku
    followup:
      -
        name: test_report
    init: |
      "{cache_root_dir()}/command.raku".IO.spurt(config()<code>);
      run_task "smoke_test", %(
        command => "{cache_root_dir()}/command.raku",
        cnt => config()<cnt>,
      );
    subtasks:
      -
        name: smoke_test
        language: Bash
        code: |
          echo "run: ["
          cat $command
          echo "]"
          nohup raku $command 1>&2 1>log.txt &
          pid=$!
          echo "pid: $pid"
          echo "====="
          echo "GET localhost:8080"
          echo "====="
          sleep 10
          mkdir -p  $cache_root_dir/tests/
          curl http://localhost:8080 -s -D - -L --verbose -f && touch $cache_root_dir/tests/$cnt.ok
          echo "====="
          kill $pid
          echo "log:"
          cat log.txt
    code: |
      say "Finished";
      if "{cache_root_dir()}/tests/{config()<cnt>}.ok".IO ~~ :e {
        say ">>> PASSED";
        update_state(%( test => config()<cnt>, result => "PASSED" ))
      } else {
        say ">>> FAILED";
        update_state(%( test => config()<cnt>, result => "FAILED" ))
      }
    hub:
      language: Raku
      code: |
        my $code;
        my @examples;
        my $fh = open("source/README.md");
        my $cnt = 1;
        for $fh.lines -> $i { 
          if $i ~~ /^ "```raku"/ ^fff^  $i ~~ /^ "```"/ { 
            $code ~= "$i\n"
          } elsif ($i ~~ /^ "```raku"/ or $fh.eof) { 
            @examples.push(%( config => %( code => $code, cnt => $cnt++ ) )) if $code; 
            $code = ""; 
          }   
        }
        $fh.close();
        update_state(%( list => @examples ));
  -
    name: test_report
    language: Raku
    code: |
      for config()<parent><state><> -> $i {
        say $i.perl
      }        
